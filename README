
                                S.I.W.O.        
===============================================================================
===============================================================================

   SIWO is a public, personal project that focuses on the creation of an

   Instruction Set Architecture ( ISA ) along with an accompanying parser and

   compiler in order to execute high-level programs. This project aims to

   document all design decisions, pertaining to limitations and optimizations

   found at the hardware and language levels. Most notably, this project will

   attempt to start from a single-cycle processor and eventually implement

   a pipeline design, where further optimizations will be added in order to

   improve the processor's efficiency. All changes will be recorded in both

   this file listed under the change log segment and to the appropriate
   
   sub-project, along with design decisions if any are made.


==  FEATURES  =================================================================
===============================================================================

  > single cycle architecture with instruction and data bus with of 16 bits

    and 16 available registers

  > absolute and relative branches and jumps

==  DESIGN DECISIONS  =========================================================
===============================================================================

  > assembly 'set' function is only instruction that accepts immediate value,

    operation instructions only use registers to maximize amount of available
    
    registers

  > branching is broken into two instructions, first the comparison and
  
    second the branching destination on the valid comparison. This allows

    both branching and jumping to reach farther, as 11 bits are used for

    the destination address

==  CHANGE LOG  ===============================================================
===============================================================================
  
  > included very basic lexer, parser, and Abstract Syntax Tree generator,
    
    all runnable from single runner

  > changed name of file and directory from 'parser' to correct name 
  
    'assembler', research is good for you

  > assembler converts provided assembly file into machine code file

  > single cycle ISA completed, both data memory and instruction ROM use files

    instead of caches
